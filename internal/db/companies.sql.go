// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name, cnpj, contact_email)
VALUES ($1, $2, $3)
RETURNING id, name, cnpj, contact_email, created_at
`

type CreateCompanyParams struct {
	Name         string
	Cnpj         string
	ContactEmail pgtype.Text
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.Name, arg.Cnpj, arg.ContactEmail)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cnpj,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompanyByCNPJ = `-- name: GetCompanyByCNPJ :one
SELECT id, name, cnpj, contact_email, created_at FROM companies
WHERE cnpj = $1
`

func (q *Queries) GetCompanyByCNPJ(ctx context.Context, cnpj string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByCNPJ, cnpj)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cnpj,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, cnpj, contact_email, created_at FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cnpj,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, cnpj, contact_email, created_at FROM companies
ORDER BY created_at DESC
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cnpj,
			&i.ContactEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompaniesPaginated = `-- name: ListCompaniesPaginated :many
SELECT id, name, cnpj, contact_email, created_at FROM companies
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCompaniesPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCompaniesPaginated(ctx context.Context, arg ListCompaniesPaginatedParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompaniesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cnpj,
			&i.ContactEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCompaniesByName = `-- name: SearchCompaniesByName :many
SELECT id, name, cnpj, contact_email, created_at FROM companies
WHERE name ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
`

func (q *Queries) SearchCompaniesByName(ctx context.Context, dollar_1 pgtype.Text) ([]Company, error) {
	rows, err := q.db.Query(ctx, searchCompaniesByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cnpj,
			&i.ContactEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies
SET name = $2,
    cnpj = $3,
    contact_email = $4
WHERE id = $1
`

type UpdateCompanyParams struct {
	ID           pgtype.UUID
	Name         string
	Cnpj         string
	ContactEmail pgtype.Text
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.Exec(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Cnpj,
		arg.ContactEmail,
	)
	return err
}
