// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company_driver_bindings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompanyDriverBinding = `-- name: CreateCompanyDriverBinding :one
INSERT INTO company_driver_bindings (company_id, driver_id, start_date, end_date)
VALUES ($1, $2, $3, $4)
RETURNING id, company_id, driver_id, start_date, end_date, created_at
`

type CreateCompanyDriverBindingParams struct {
	CompanyID pgtype.UUID
	DriverID  pgtype.UUID
	StartDate pgtype.Date
	EndDate   pgtype.Date
}

func (q *Queries) CreateCompanyDriverBinding(ctx context.Context, arg CreateCompanyDriverBindingParams) (CompanyDriverBinding, error) {
	row := q.db.QueryRow(ctx, createCompanyDriverBinding,
		arg.CompanyID,
		arg.DriverID,
		arg.StartDate,
		arg.EndDate,
	)
	var i CompanyDriverBinding
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.DriverID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBinding = `-- name: DeleteBinding :exec
DELETE FROM company_driver_bindings
WHERE id = $1
`

func (q *Queries) DeleteBinding(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBinding, id)
	return err
}

const endBinding = `-- name: EndBinding :exec
UPDATE company_driver_bindings
SET end_date = $2
WHERE id = $1
`

type EndBindingParams struct {
	ID      pgtype.UUID
	EndDate pgtype.Date
}

func (q *Queries) EndBinding(ctx context.Context, arg EndBindingParams) error {
	_, err := q.db.Exec(ctx, endBinding, arg.ID, arg.EndDate)
	return err
}

const getActiveBindingByDriverID = `-- name: GetActiveBindingByDriverID :one
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE driver_id = $1
  AND end_date IS NULL
ORDER BY start_date DESC
LIMIT 1
`

func (q *Queries) GetActiveBindingByDriverID(ctx context.Context, driverID pgtype.UUID) (CompanyDriverBinding, error) {
	row := q.db.QueryRow(ctx, getActiveBindingByDriverID, driverID)
	var i CompanyDriverBinding
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.DriverID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getAllBindingsByCompanyID = `-- name: GetAllBindingsByCompanyID :many
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE company_id = $1
ORDER BY start_date DESC
`

func (q *Queries) GetAllBindingsByCompanyID(ctx context.Context, companyID pgtype.UUID) ([]CompanyDriverBinding, error) {
	rows, err := q.db.Query(ctx, getAllBindingsByCompanyID, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyDriverBinding
	for rows.Next() {
		var i CompanyDriverBinding
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.DriverID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBindingsByDriverID = `-- name: GetAllBindingsByDriverID :many
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE driver_id = $1
ORDER BY start_date DESC
`

func (q *Queries) GetAllBindingsByDriverID(ctx context.Context, driverID pgtype.UUID) ([]CompanyDriverBinding, error) {
	rows, err := q.db.Query(ctx, getAllBindingsByDriverID, driverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyDriverBinding
	for rows.Next() {
		var i CompanyDriverBinding
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.DriverID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBindingByID = `-- name: GetBindingByID :one
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE id = $1
`

func (q *Queries) GetBindingByID(ctx context.Context, id pgtype.UUID) (CompanyDriverBinding, error) {
	row := q.db.QueryRow(ctx, getBindingByID, id)
	var i CompanyDriverBinding
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.DriverID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const listActiveBindings = `-- name: ListActiveBindings :many
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE end_date IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListActiveBindingsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListActiveBindings(ctx context.Context, arg ListActiveBindingsParams) ([]CompanyDriverBinding, error) {
	rows, err := q.db.Query(ctx, listActiveBindings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyDriverBinding
	for rows.Next() {
		var i CompanyDriverBinding
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.DriverID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBindingsPaginated = `-- name: ListBindingsPaginated :many
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListBindingsPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListBindingsPaginated(ctx context.Context, arg ListBindingsPaginatedParams) ([]CompanyDriverBinding, error) {
	rows, err := q.db.Query(ctx, listBindingsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyDriverBinding
	for rows.Next() {
		var i CompanyDriverBinding
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.DriverID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFinishedBindings = `-- name: ListFinishedBindings :many
SELECT id, company_id, driver_id, start_date, end_date, created_at FROM company_driver_bindings
WHERE end_date IS NOT NULL
ORDER BY end_date DESC
LIMIT $1 OFFSET $2
`

type ListFinishedBindingsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListFinishedBindings(ctx context.Context, arg ListFinishedBindingsParams) ([]CompanyDriverBinding, error) {
	rows, err := q.db.Query(ctx, listFinishedBindings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyDriverBinding
	for rows.Next() {
		var i CompanyDriverBinding
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.DriverID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
