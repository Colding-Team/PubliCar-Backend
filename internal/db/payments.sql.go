// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  trip_id,
  driver_id,
  amount,
  status,
  paid_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, trip_id, driver_id, amount, status, paid_at, created_at, updated_at
`

type CreatePaymentParams struct {
	TripID   pgtype.UUID
	DriverID pgtype.UUID
	Amount   pgtype.Numeric
	Status   string
	PaidAt   pgtype.Timestamptz
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.TripID,
		arg.DriverID,
		arg.Amount,
		arg.Status,
		arg.PaidAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.DriverID,
		&i.Amount,
		&i.Status,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, trip_id, driver_id, amount, status, paid_at, created_at, updated_at FROM payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.DriverID,
		&i.Amount,
		&i.Status,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, trip_id, driver_id, amount, status, paid_at, created_at, updated_at FROM payments
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPaymentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.DriverID,
			&i.Amount,
			&i.Status,
			&i.PaidAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByDriver = `-- name: ListPaymentsByDriver :many
SELECT id, trip_id, driver_id, amount, status, paid_at, created_at, updated_at FROM payments
WHERE driver_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentsByDriverParams struct {
	DriverID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListPaymentsByDriver(ctx context.Context, arg ListPaymentsByDriverParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByDriver, arg.DriverID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.DriverID,
			&i.Amount,
			&i.Status,
			&i.PaidAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByTrip = `-- name: ListPaymentsByTrip :many
SELECT id, trip_id, driver_id, amount, status, paid_at, created_at, updated_at FROM payments
WHERE trip_id = $1
`

func (q *Queries) ListPaymentsByTrip(ctx context.Context, tripID pgtype.UUID) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByTrip, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.DriverID,
			&i.Amount,
			&i.Status,
			&i.PaidAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $2, paid_at = $3
WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID     pgtype.UUID
	Status string
	PaidAt pgtype.Timestamptz
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.ID, arg.Status, arg.PaidAt)
	return err
}
