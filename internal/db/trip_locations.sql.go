// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trip_locations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTripLocation = `-- name: CreateTripLocation :one
INSERT INTO trip_locations (trip_id, lat, lng, timestamp)
VALUES ($1, $2, $3, $4)
RETURNING id, trip_id, lat, lng, timestamp
`

type CreateTripLocationParams struct {
	TripID    pgtype.UUID
	Lat       float64
	Lng       float64
	Timestamp pgtype.Timestamptz
}

func (q *Queries) CreateTripLocation(ctx context.Context, arg CreateTripLocationParams) (TripLocation, error) {
	row := q.db.QueryRow(ctx, createTripLocation,
		arg.TripID,
		arg.Lat,
		arg.Lng,
		arg.Timestamp,
	)
	var i TripLocation
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Lat,
		&i.Lng,
		&i.Timestamp,
	)
	return i, err
}

const deleteTripLocation = `-- name: DeleteTripLocation :exec
DELETE FROM trip_locations
WHERE id = $1
`

func (q *Queries) DeleteTripLocation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTripLocation, id)
	return err
}

const deleteTripLocationsByTripID = `-- name: DeleteTripLocationsByTripID :exec
DELETE FROM trip_locations
WHERE trip_id = $1
`

func (q *Queries) DeleteTripLocationsByTripID(ctx context.Context, tripID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTripLocationsByTripID, tripID)
	return err
}

const getTripLocationByID = `-- name: GetTripLocationByID :one
SELECT id, trip_id, lat, lng, timestamp FROM trip_locations
WHERE id = $1
`

func (q *Queries) GetTripLocationByID(ctx context.Context, id pgtype.UUID) (TripLocation, error) {
	row := q.db.QueryRow(ctx, getTripLocationByID, id)
	var i TripLocation
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Lat,
		&i.Lng,
		&i.Timestamp,
	)
	return i, err
}

const listTripLocationsByTripID = `-- name: ListTripLocationsByTripID :many
SELECT id, trip_id, lat, lng, timestamp FROM trip_locations
WHERE trip_id = $1
ORDER BY timestamp ASC
`

func (q *Queries) ListTripLocationsByTripID(ctx context.Context, tripID pgtype.UUID) ([]TripLocation, error) {
	rows, err := q.db.Query(ctx, listTripLocationsByTripID, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TripLocation
	for rows.Next() {
		var i TripLocation
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Lat,
			&i.Lng,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripLocationsByTripIDWithPagination = `-- name: ListTripLocationsByTripIDWithPagination :many
SELECT id, trip_id, lat, lng, timestamp FROM trip_locations
WHERE trip_id = $1
ORDER BY timestamp ASC
LIMIT $2 OFFSET $3
`

type ListTripLocationsByTripIDWithPaginationParams struct {
	TripID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListTripLocationsByTripIDWithPagination(ctx context.Context, arg ListTripLocationsByTripIDWithPaginationParams) ([]TripLocation, error) {
	rows, err := q.db.Query(ctx, listTripLocationsByTripIDWithPagination, arg.TripID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TripLocation
	for rows.Next() {
		var i TripLocation
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Lat,
			&i.Lng,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
